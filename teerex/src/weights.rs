/*
	Copyright 2021 Integritee AG and Supercomputing Systems AG

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

*/

//! Autogenerated weights for pallet_teerex with reference hardware:
//! * Core(TM) i7-10875H
//! * 32GB of RAM
//! * NVMe SSD
//!
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-07-08, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("integritee-rococo-local-dev"), DB CACHE: 128

// Executed Command:
// ./target/release/integritee-collator
// benchmark
// --chain=integritee-rococo-local-dev
// --steps=50
// --repeat=20
// --pallet=pallet_teerex
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./polkadot-parachains/integritee-runtime/src/weights/pallet_teerex.rs
// --template=./scripts/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_teerex.
pub trait WeightInfo {
	fn register_enclave() -> Weight;
	fn register_dcap_enclave() -> Weight;
	fn register_quoting_enclave() -> Weight;
	fn unregister_enclave() -> Weight;
	fn call_worker() -> Weight;
	fn confirm_processed_parentchain_block() -> Weight;
	fn publish_hash() -> Weight;
}

/// Weights for pallet_teerex using the Integritee parachain node and recommended hardware.
pub struct IntegriteeWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for IntegriteeWeight<T> {
	fn register_enclave() -> Weight {
		Weight::from_ref_time(1_969_500_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// TODO benchmark dcap registration
	fn register_dcap_enclave() -> Weight {
		Weight::from_ref_time(1_969_500_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// TODO benchmark dcap registration
	fn register_quoting_enclave() -> Weight {
		Weight::from_ref_time(1_969_500_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn unregister_enclave() -> Weight {
		Weight::from_ref_time(53_300_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	fn call_worker() -> Weight {
		Weight::from_ref_time(57_200_000)
	}
	fn confirm_processed_parentchain_block() -> Weight {
		Weight::from_ref_time(46_900_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	fn publish_hash() -> Weight {
		Weight::from_ref_time(1_969_500_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For tests
impl WeightInfo for () {
	fn register_enclave() -> Weight {
		Weight::from_ref_time(1_969_500_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn register_dcap_enclave() -> Weight {
		Weight::from_ref_time(1_969_500_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn register_quoting_enclave() -> Weight {
		Weight::from_ref_time(1_969_500_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn unregister_enclave() -> Weight {
		Weight::from_ref_time(53_300_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	fn call_worker() -> Weight {
		Weight::from_ref_time(57_200_000)
	}
	fn confirm_processed_parentchain_block() -> Weight {
		Weight::from_ref_time(46_900_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn publish_hash() -> Weight {
		Weight::from_ref_time(1_969_500_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
